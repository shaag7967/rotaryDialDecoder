

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon May 01 21:28:46 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	swtext1,local,class=CONST,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    15                           	dabs	1,0x7E,2
    16  0000                     
    17                           ; Version 1.41
    18                           ; Generated 25/01/2017 GMT
    19                           ; 
    20                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F628A Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     	;# 
    52  0001                     	;# 
    53  0002                     	;# 
    54  0003                     	;# 
    55  0004                     	;# 
    56  0005                     	;# 
    57  0006                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000E                     	;# 
    62  000E                     	;# 
    63  000F                     	;# 
    64  0010                     	;# 
    65  0011                     	;# 
    66  0012                     	;# 
    67  0015                     	;# 
    68  0015                     	;# 
    69  0016                     	;# 
    70  0017                     	;# 
    71  0018                     	;# 
    72  0019                     	;# 
    73  001A                     	;# 
    74  001F                     	;# 
    75  0081                     	;# 
    76  0085                     	;# 
    77  0086                     	;# 
    78  008C                     	;# 
    79  008E                     	;# 
    80  0092                     	;# 
    81  0098                     	;# 
    82  0099                     	;# 
    83  009A                     	;# 
    84  009B                     	;# 
    85  009C                     	;# 
    86  009D                     	;# 
    87  009F                     	;# 
    88                           
    89                           	psect	idataCOMMON
    90  06E0                     __pidataCOMMON:	
    91                           
    92                           ;initializer for _number_debounce
    93  06E0  34AA               	retlw	170
    94                           
    95                           ;initializer for _dialActive_debounce
    96  06E1  34FF               	retlw	255
    97                           
    98                           	psect	idataBANK0
    99  06DE                     __pidataBANK0:	
   100                           
   101                           ;initializer for _hook_debounce
   102  06DE  34AA               	retlw	170
   103  06DF  3400               	retlw	0
   104  0006                     _PORTBbits	set	6
   105  0005                     _PORTAbits	set	5
   106  0006                     _PORTB	set	6
   107  001F                     _CMCON	set	31
   108  0005                     _PORTA	set	5
   109  0081                     _OPTION_REGbits	set	129
   110  0086                     _TRISB	set	134
   111  042B                     _TRISA3	set	1067
   112  042A                     _TRISA2	set	1066
   113                           
   114                           ; #config settings
   115  0000                     
   116                           	psect	cinit
   117  07EF                     start_initialization:	
   118  07EF                     __initialization:	
   119                           
   120                           ; Initialize objects allocated to BANK0
   121  07EF  26DE               	fcall	__pidataBANK0	;fetch initializer
   122  07F0  00A3               	movwf	__pdataBANK0& (0+127)
   123  07F1  26DF               	fcall	__pidataBANK0+1	;fetch initializer
   124  07F2  00A4               	movwf	(__pdataBANK0+1)& (0+127)
   125                           
   126                           ; Initialize objects allocated to COMMON
   127  07F3  26E0               	fcall	__pidataCOMMON	;fetch initializer
   128  07F4  00FC               	movwf	__pdataCOMMON& (0+127)
   129  07F5  26E1               	fcall	__pidataCOMMON+1	;fetch initializer
   130  07F6  00FD               	movwf	(__pdataCOMMON+1)& (0+127)
   131                           
   132                           ; Clear objects allocated to BANK0
   133  07F7  01A0               	clrf	__pbssBANK0& (0+127)
   134  07F8  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   135  07F9  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   136                           
   137                           ; Clear objects allocated to COMMON
   138  07FA  01F8               	clrf	__pbssCOMMON& (0+127)
   139  07FB  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   140  07FC  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   141  07FD  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
   142  07FE                     end_of_initialization:	
   143                           ;End of C runtime variable initialization code
   144                           
   145  07FE                     __end_of__initialization:	
   146  07FE  0183               	clrf	3
   147  07FF  2F2D               	ljmp	_main	;jump to C main() function
   148                           
   149                           	psect	bssCOMMON
   150  0078                     __pbssCOMMON:	
   151  0078                     _hookPinState_current:	
   152  0078                     	ds	1
   153  0079                     _delay_setNumber:	
   154  0079                     	ds	1
   155  007A                     _numberPinState_current:	
   156  007A                     	ds	1
   157  007B                     _dialState:	
   158  007B                     	ds	1
   159                           
   160                           	psect	dataCOMMON
   161  007C                     __pdataCOMMON:	
   162  007C                     _number_debounce:	
   163  007C                     	ds	1
   164  007D                     _dialActive_debounce:	
   165  007D                     	ds	1
   166                           
   167                           	psect	bssBANK0
   168  0020                     __pbssBANK0:	
   169  0020                     _hookPinState_last:	
   170  0020                     	ds	1
   171  0021                     _numberEdgeCounter:	
   172  0021                     	ds	1
   173  0022                     _numberPinState_last:	
   174  0022                     	ds	1
   175                           
   176                           	psect	dataBANK0
   177  0023                     __pdataBANK0:	
   178  0023                     _hook_debounce:	
   179  0023                     	ds	2
   180                           
   181                           	psect	cstackCOMMON
   182  0070                     __pcstackCOMMON:	
   183  0070                     ?_main:	
   184  0070                     ?___awmod:	
   185                           ; 1 bytes @ 0x0
   186                           
   187  0070                     ___awmod@divisor:	
   188                           ; 2 bytes @ 0x0
   189                           
   190                           
   191                           ; 2 bytes @ 0x0
   192  0070                     	ds	2
   193  0072                     ___awmod@dividend:	
   194                           
   195                           ; 2 bytes @ 0x2
   196  0072                     	ds	2
   197  0074                     ??___awmod:	
   198                           
   199                           ; 1 bytes @ 0x4
   200  0074                     	ds	1
   201  0075                     ___awmod@counter:	
   202                           
   203                           ; 1 bytes @ 0x5
   204  0075                     	ds	1
   205  0076                     ___awmod@sign:	
   206                           
   207                           ; 1 bytes @ 0x6
   208  0076                     	ds	1
   209  0077                     ??_main:	
   210                           
   211                           ; 1 bytes @ 0x7
   212  0077                     	ds	1
   213                           
   214                           	psect	maintext
   215  072D                     __pmaintext:	
   216 ;;
   217 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   218 ;;
   219 ;; *************** function _main *****************
   220 ;; Defined at:
   221 ;;		line 52 in file "main.c"
   222 ;; Parameters:    Size  Location     Type
   223 ;;		None
   224 ;; Auto vars:     Size  Location     Type
   225 ;;		None
   226 ;; Return value:  Size  Location     Type
   227 ;;                  1    wreg      void 
   228 ;; Registers used:
   229 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   230 ;; Tracked objects:
   231 ;;		On entry : B00/0
   232 ;;		On exit  : 0/0
   233 ;;		Unchanged: 0/0
   234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   235 ;;      Params:         0       0       0       0
   236 ;;      Locals:         0       0       0       0
   237 ;;      Temps:          1       0       0       0
   238 ;;      Totals:         1       0       0       0
   239 ;;Total ram usage:        1 bytes
   240 ;; Hardware stack levels required when called:    1
   241 ;; This function calls:
   242 ;;		___awmod
   243 ;; This function is called by:
   244 ;;		Startup code after reset
   245 ;; This function uses a non-reentrant model
   246 ;;
   247                           
   248                           
   249                           ;psect for function _main
   250  072D                     _main:	
   251                           
   252                           ;main.c: 54: PORTA = 0;
   253                           
   254                           ;incstack = 0
   255                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   256  072D  1283               	bcf	3,5	;RP0=0, select bank0
   257  072E  1303               	bcf	3,6	;RP1=0, select bank0
   258  072F  0185               	clrf	5	;volatile
   259                           
   260                           ;main.c: 55: CMCON = 0x07;
   261  0730  3007               	movlw	7
   262  0731  009F               	movwf	31	;volatile
   263                           
   264                           ;main.c: 56: TRISA2 = 0;
   265  0732  1683               	bsf	3,5	;RP0=1, select bank1
   266  0733  1303               	bcf	3,6	;RP1=0, select bank1
   267  0734  1105               	bcf	5,2	;volatile
   268                           
   269                           ;main.c: 57: TRISA3 = 0;
   270  0735  1185               	bcf	5,3	;volatile
   271                           
   272                           ;main.c: 59: PORTB = 0xFF;
   273  0736  30FF               	movlw	255
   274  0737  1283               	bcf	3,5	;RP0=0, select bank0
   275  0738  1303               	bcf	3,6	;RP1=0, select bank0
   276  0739  0086               	movwf	6	;volatile
   277                           
   278                           ;main.c: 60: TRISB = 0xF0;
   279  073A  30F0               	movlw	240
   280  073B  1683               	bsf	3,5	;RP0=1, select bank1
   281  073C  1303               	bcf	3,6	;RP1=0, select bank1
   282  073D  0086               	movwf	6	;volatile
   283                           
   284                           ;main.c: 62: PORTAbits.RA2 = 0;
   285  073E  1283               	bcf	3,5	;RP0=0, select bank0
   286  073F  1303               	bcf	3,6	;RP1=0, select bank0
   287  0740  1105               	bcf	5,2	;volatile
   288                           
   289                           ;main.c: 64: OPTION_REGbits.nRBPU = 0;
   290  0741  1683               	bsf	3,5	;RP0=1, select bank1
   291  0742  1303               	bcf	3,6	;RP1=0, select bank1
   292  0743  1381               	bcf	1,7	;volatile
   293                           
   294                           ;main.c: 67: {
   295                           ;main.c: 69: switch(dialState)
   296                           
   297                           ;main.c: 66: while(1)
   298  0744  2FE3               	goto	l802
   299  0745                     l750:	
   300                           ;main.c: 70: {
   301                           ;main.c: 71: case 0:
   302                           
   303                           
   304                           ;main.c: 72: dialActive_debounce <<= 1;
   305  0745  1003               	clrc
   306  0746  0DFD               	rlf	_dialActive_debounce,f
   307                           
   308                           ;main.c: 73: if(PORTBbits.RB5)
   309  0747  1283               	bcf	3,5	;RP0=0, select bank0
   310  0748  1303               	bcf	3,6	;RP1=0, select bank0
   311  0749  1A86               	btfsc	6,5	;volatile
   312                           
   313                           ;main.c: 74: dialActive_debounce |= 0x01;
   314  074A  147D               	bsf	_dialActive_debounce,0
   315                           
   316                           ;main.c: 76: if(dialActive_debounce == 0x00)
   317  074B  087D               	movf	_dialActive_debounce,w
   318  074C  1D03               	btfss	3,2
   319  074D  2FB3               	goto	l804
   320                           
   321                           ;main.c: 77: {
   322                           ;main.c: 78: dialActive_debounce = 0xFF;
   323  074E  30FF               	movlw	255
   324  074F  00F7               	movwf	??_main
   325  0750  0877               	movf	??_main,w
   326  0751  00FD               	movwf	_dialActive_debounce
   327                           
   328                           ;main.c: 79: numberEdgeCounter = 0;
   329  0752  01A1               	clrf	_numberEdgeCounter
   330                           
   331                           ;main.c: 80: numberPinState_last = numberPinState_current = PORTBbits.RB4;
   332  0753  0E06               	swapf	6,w	;volatile
   333  0754  3901               	andlw	1
   334  0755  00FA               	movwf	_numberPinState_current
   335  0756  00F7               	movwf	??_main
   336  0757  0877               	movf	??_main,w
   337  0758  00A2               	movwf	_numberPinState_last
   338                           
   339                           ;main.c: 81: dialState = 1;
   340  0759  01FB               	clrf	_dialState
   341  075A  0AFB               	incf	_dialState,f
   342                           
   343                           ;main.c: 82: }
   344                           ;main.c: 83: break;
   345  075B  2FB3               	goto	l804
   346  075C                     l49:	
   347                           ;main.c: 84: case 1:
   348                           
   349                           
   350                           ;main.c: 85: if(PORTBbits.RB5 == 0)
   351  075C  1283               	bcf	3,5	;RP0=0, select bank0
   352  075D  1303               	bcf	3,6	;RP1=0, select bank0
   353  075E  1A86               	btfsc	6,5	;volatile
   354  075F  2F7F               	goto	l50
   355                           
   356                           ;main.c: 86: {
   357                           ;main.c: 88: number_debounce <<= 1;
   358  0760  1003               	clrc
   359  0761  0DFC               	rlf	_number_debounce,f
   360                           
   361                           ;main.c: 89: if(PORTBbits.RB4)
   362  0762  1E06               	btfss	6,4	;volatile
   363  0763  2F65               	goto	l772
   364                           
   365                           ;main.c: 90: number_debounce |= 0x01;
   366  0764  147C               	bsf	_number_debounce,0
   367  0765                     l772:	
   368                           
   369                           ;main.c: 92: if(number_debounce == 0xFF || number_debounce == 0x00)
   370  0765  0A7C               	incf	_number_debounce,w
   371  0766  1D03               	btfss	3,2
   372  0767  087C               	movf	_number_debounce,w
   373  0768  1D03               	btfss	3,2
   374  0769  2FB3               	goto	l804
   375                           
   376                           ;main.c: 93: {
   377                           ;main.c: 95: numberPinState_current = number_debounce;
   378  076A  087C               	movf	_number_debounce,w
   379  076B  00F7               	movwf	??_main
   380  076C  0877               	movf	??_main,w
   381  076D  00FA               	movwf	_numberPinState_current
   382                           
   383                           ;main.c: 96: if(numberPinState_current != numberPinState_last)
   384  076E  087A               	movf	_numberPinState_current,w
   385  076F  0622               	xorwf	_numberPinState_last,w
   386  0770  1903               	skipnz
   387  0771  2F7A               	goto	l782
   388                           
   389                           ;main.c: 97: {
   390                           ;main.c: 98: numberEdgeCounter++;
   391  0772  3001               	movlw	1
   392  0773  00F7               	movwf	??_main
   393  0774  0877               	movf	??_main,w
   394  0775  07A1               	addwf	_numberEdgeCounter,f
   395                           
   396                           ;main.c: 99: numberPinState_last = numberPinState_current;
   397  0776  087A               	movf	_numberPinState_current,w
   398  0777  00F7               	movwf	??_main
   399  0778  0877               	movf	??_main,w
   400  0779  00A2               	movwf	_numberPinState_last
   401  077A                     l782:	
   402                           
   403                           ;main.c: 100: }
   404                           ;main.c: 102: number_debounce = 0xAA;
   405  077A  30AA               	movlw	170
   406  077B  00F7               	movwf	??_main
   407  077C  0877               	movf	??_main,w
   408  077D  00FC               	movwf	_number_debounce
   409                           
   410                           ;main.c: 103: }
   411                           ;main.c: 104: }
   412  077E  2FB3               	goto	l804
   413  077F                     l50:	
   414                           
   415                           ;main.c: 105: else
   416                           ;main.c: 106: {
   417                           ;main.c: 107: PORTAbits.RA2 = 0;
   418  077F  1105               	bcf	5,2	;volatile
   419                           
   420                           ;main.c: 108: delay_setNumber = 100/2;
   421  0780  3032               	movlw	50
   422  0781  00F7               	movwf	??_main
   423  0782  0877               	movf	??_main,w
   424  0783  00F9               	movwf	_delay_setNumber
   425                           
   426                           ;main.c: 109: dialState = 2;
   427  0784  3002               	movlw	2
   428  0785  2FA6               	goto	L1
   429  0786                     l786:	
   430                           ;main.c: 112: case 2:
   431                           
   432                           ;main.c: 110: }
   433                           ;main.c: 111: break;
   434                           
   435                           
   436                           ;main.c: 113: delay_setNumber--;
   437  0786  3001               	movlw	1
   438  0787  02F9               	subwf	_delay_setNumber,f
   439                           
   440                           ;main.c: 115: if(delay_setNumber == 0)
   441  0788  0879               	movf	_delay_setNumber,w
   442  0789  1D03               	btfss	3,2
   443  078A  2FB3               	goto	l804
   444                           
   445                           ;main.c: 116: {
   446                           ;main.c: 117: PORTB = (((numberEdgeCounter >> 1) + 1) % 10) & 0x0F;
   447  078B  300A               	movlw	10
   448  078C  00F0               	movwf	___awmod@divisor
   449  078D  3000               	movlw	0
   450  078E  00F1               	movwf	___awmod@divisor+1
   451  078F  1283               	bcf	3,5	;RP0=0, select bank0
   452  0790  1303               	bcf	3,6	;RP1=0, select bank0
   453  0791  0821               	movf	_numberEdgeCounter,w
   454  0792  00F7               	movwf	??_main
   455  0793  1003               	clrc
   456  0794  0C77               	rrf	??_main,w
   457  0795  3E01               	addlw	1
   458  0796  00F2               	movwf	___awmod@dividend
   459  0797  3000               	movlw	0
   460  0798  1803               	skipnc
   461  0799  3001               	movlw	1
   462  079A  00F3               	movwf	___awmod@dividend+1
   463  079B  26E2               	fcall	___awmod
   464  079C  0870               	movf	?___awmod,w
   465  079D  390F               	andlw	15
   466  079E  1283               	bcf	3,5	;RP0=0, select bank0
   467  079F  1303               	bcf	3,6	;RP1=0, select bank0
   468  07A0  0086               	movwf	6	;volatile
   469                           
   470                           ;main.c: 118: delay_setNumber = 100/2;
   471  07A1  3032               	movlw	50
   472  07A2  00F7               	movwf	??_main
   473  07A3  0877               	movf	??_main,w
   474  07A4  00F9               	movwf	_delay_setNumber
   475                           
   476                           ;main.c: 119: dialState = 3;
   477  07A5  3003               	movlw	3
   478  07A6                     L1:	
   479  07A6  00F7               	movwf	??_main
   480  07A7  0877               	movf	??_main,w
   481  07A8  00FB               	movwf	_dialState
   482                           
   483                           ;main.c: 120: }
   484                           ;main.c: 121: break;
   485  07A9  2FB3               	goto	l804
   486  07AA                     l794:	
   487                           ;main.c: 122: case 3:
   488                           
   489                           
   490                           ;main.c: 123: delay_setNumber--;
   491  07AA  3001               	movlw	1
   492  07AB  02F9               	subwf	_delay_setNumber,f
   493                           
   494                           ;main.c: 125: if(delay_setNumber == 0)
   495  07AC  0879               	movf	_delay_setNumber,w
   496  07AD  1D03               	btfss	3,2
   497  07AE  2FB3               	goto	l804
   498                           
   499                           ;main.c: 126: {
   500                           ;main.c: 127: PORTAbits.RA2 = 1;
   501  07AF  1283               	bcf	3,5	;RP0=0, select bank0
   502  07B0  1303               	bcf	3,6	;RP1=0, select bank0
   503  07B1  1505               	bsf	5,2	;volatile
   504                           
   505                           ;main.c: 128: dialState = 0;
   506  07B2  01FB               	clrf	_dialState
   507  07B3                     l804:	
   508                           ;main.c: 131: }
   509                           
   510                           ;main.c: 129: }
   511                           ;main.c: 130: break;
   512                           
   513                           
   514                           ;main.c: 134: hook_debounce <<= 1;
   515  07B3  3001               	movlw	1
   516  07B4  1283               	bcf	3,5	;RP0=0, select bank0
   517  07B5  1303               	bcf	3,6	;RP1=0, select bank0
   518  07B6                     u425:	
   519  07B6  1003               	clrc
   520  07B7  0DA3               	rlf	_hook_debounce,f
   521  07B8  0DA4               	rlf	_hook_debounce+1,f
   522  07B9  3EFF               	addlw	-1
   523  07BA  1D03               	skipz
   524  07BB  2FB6               	goto	u425
   525                           
   526                           ;main.c: 135: if(PORTAbits.RA1)
   527  07BC  1885               	btfsc	5,1	;volatile
   528                           
   529                           ;main.c: 136: hook_debounce |= 0x01;
   530  07BD  1423               	bsf	_hook_debounce,0
   531                           
   532                           ;main.c: 138: if(hook_debounce == 0xFFFF || hook_debounce == 0x0000)
   533  07BE  0A23               	incf	_hook_debounce,w
   534  07BF  1903               	btfsc	3,2
   535  07C0  0A24               	incf	_hook_debounce+1,w
   536  07C1  1903               	btfsc	3,2
   537  07C2  2FC7               	goto	l814
   538  07C3  0823               	movf	_hook_debounce,w
   539  07C4  0424               	iorwf	_hook_debounce+1,w
   540  07C5  1D03               	btfss	3,2
   541  07C6  2FDC               	goto	l822
   542  07C7                     l814:	
   543                           
   544                           ;main.c: 139: {
   545                           ;main.c: 141: hookPinState_current = hook_debounce;
   546  07C7  0823               	movf	_hook_debounce,w
   547  07C8  00F7               	movwf	??_main
   548  07C9  0877               	movf	??_main,w
   549  07CA  00F8               	movwf	_hookPinState_current
   550                           
   551                           ;main.c: 142: if(hookPinState_current != hookPinState_last)
   552  07CB  0878               	movf	_hookPinState_current,w
   553  07CC  0620               	xorwf	_hookPinState_last,w
   554  07CD  1903               	skipnz
   555  07CE  2FD8               	goto	l820
   556                           
   557                           ;main.c: 143: {
   558                           ;main.c: 144: PORTAbits.RA3 = hookPinState_current;
   559  07CF  0C78               	rrf	_hookPinState_current,w
   560  07D0  1C03               	skipc
   561  07D1  1185               	bcf	5,3	;volatile
   562  07D2  1803               	skipnc
   563  07D3  1585               	bsf	5,3	;volatile
   564                           
   565                           ;main.c: 145: hookPinState_last = hookPinState_current;
   566  07D4  0878               	movf	_hookPinState_current,w
   567  07D5  00F7               	movwf	??_main
   568  07D6  0877               	movf	??_main,w
   569  07D7  00A0               	movwf	_hookPinState_last
   570  07D8                     l820:	
   571                           
   572                           ;main.c: 146: }
   573                           ;main.c: 148: hook_debounce = 0xAAAA;
   574  07D8  30AA               	movlw	170
   575  07D9  00A3               	movwf	_hook_debounce
   576  07DA  30AA               	movlw	170
   577  07DB  00A4               	movwf	_hook_debounce+1
   578  07DC                     l822:	
   579                           
   580                           ;main.c: 149: }
   581                           ;main.c: 151: _delay((unsigned long)((1)*(4000000/4000.0)));
   582  07DC  30C7               	movlw	199
   583  07DD  00F7               	movwf	??_main
   584  07DE                     u477:	
   585  07DE  2FDF               	nop2
   586  07DF  0BF7               	decfsz	??_main,f
   587  07E0  2FDE               	goto	u477
   588  07E1  2FE2               	nop2
   589  07E2  2FE3               	nop2
   590  07E3                     l802:	
   591  07E3  087B               	movf	_dialState,w
   592                           
   593                           ; Switch size 1, requested type "space"
   594                           ; Number of cases is 4, Range of values is 0 to 3
   595                           ; switch strategies available:
   596                           ; Name         Instructions Cycles
   597                           ; direct_byte           10     6 (fixed)
   598                           ; simple_byte           13     7 (average)
   599                           ; jumptable            260     6 (fixed)
   600                           ;	Chosen strategy is direct_byte
   601  07E4  0084               	movwf	4
   602  07E5  3004               	movlw	4
   603  07E6  0204               	subwf	4,w
   604  07E7  1803               	skipnc
   605  07E8  2FB3               	goto	l804
   606  07E9  3000               	movlw	high S860
   607  07EA  008A               	movwf	10
   608  07EB  3001               	movlw	low S860
   609  07EC  0704               	addwf	4,w
   610  07ED  0082               	movwf	2
   611  07EE  2FB3               	goto	l804
   612  07EF                     __end_of_main:	
   613                           ;main.c: 152: }
   614                           ;main.c: 154: return;
   615                           
   616                           
   617                           	psect	swtext1
   618  0001                     __pswtext1:	
   619  0001                     S860:	
   620  0001  2F45               	ljmp	l750
   621  0002  2F5C               	ljmp	l49
   622  0003  2F86               	ljmp	l786
   623  0004  2FAA               	ljmp	l794
   624                           
   625                           	psect	text1
   626  06E2                     __ptext1:	
   627 ;; *************** function ___awmod *****************
   628 ;; Defined at:
   629 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
   630 ;; Parameters:    Size  Location     Type
   631 ;;  divisor         2    0[COMMON] int 
   632 ;;  dividend        2    2[COMMON] int 
   633 ;; Auto vars:     Size  Location     Type
   634 ;;  sign            1    6[COMMON] unsigned char 
   635 ;;  counter         1    5[COMMON] unsigned char 
   636 ;; Return value:  Size  Location     Type
   637 ;;                  2    0[COMMON] int 
   638 ;; Registers used:
   639 ;;		wreg, status,2, status,0
   640 ;; Tracked objects:
   641 ;;		On entry : 0/0
   642 ;;		On exit  : 0/0
   643 ;;		Unchanged: 0/0
   644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   645 ;;      Params:         4       0       0       0
   646 ;;      Locals:         2       0       0       0
   647 ;;      Temps:          1       0       0       0
   648 ;;      Totals:         7       0       0       0
   649 ;;Total ram usage:        7 bytes
   650 ;; Hardware stack levels used:    1
   651 ;; This function calls:
   652 ;;		Nothing
   653 ;; This function is called by:
   654 ;;		_main
   655 ;; This function uses a non-reentrant model
   656 ;;
   657                           
   658                           
   659                           ;psect for function ___awmod
   660  06E2                     ___awmod:	
   661                           
   662                           ;incstack = 0
   663                           ; Regs used in ___awmod: [wreg+status,2+status,0]
   664  06E2  01F6               	clrf	___awmod@sign
   665  06E3  1FF3               	btfss	___awmod@dividend+1,7
   666  06E4  2EEC               	goto	l704
   667  06E5  09F2               	comf	___awmod@dividend,f
   668  06E6  09F3               	comf	___awmod@dividend+1,f
   669  06E7  0AF2               	incf	___awmod@dividend,f
   670  06E8  1903               	skipnz
   671  06E9  0AF3               	incf	___awmod@dividend+1,f
   672  06EA  01F6               	clrf	___awmod@sign
   673  06EB  0AF6               	incf	___awmod@sign,f
   674  06EC                     l704:	
   675  06EC  1FF1               	btfss	___awmod@divisor+1,7
   676  06ED  2EF3               	goto	l708
   677  06EE  09F0               	comf	___awmod@divisor,f
   678  06EF  09F1               	comf	___awmod@divisor+1,f
   679  06F0  0AF0               	incf	___awmod@divisor,f
   680  06F1  1903               	skipnz
   681  06F2  0AF1               	incf	___awmod@divisor+1,f
   682  06F3                     l708:	
   683  06F3  0870               	movf	___awmod@divisor,w
   684  06F4  0471               	iorwf	___awmod@divisor+1,w
   685  06F5  1903               	btfsc	3,2
   686  06F6  2F20               	goto	l726
   687  06F7  01F5               	clrf	___awmod@counter
   688  06F8  0AF5               	incf	___awmod@counter,f
   689  06F9                     l716:	
   690  06F9  1BF1               	btfsc	___awmod@divisor+1,7
   691  06FA  2F07               	goto	l718
   692  06FB  3001               	movlw	1
   693  06FC                     u275:	
   694  06FC  1003               	clrc
   695  06FD  0DF0               	rlf	___awmod@divisor,f
   696  06FE  0DF1               	rlf	___awmod@divisor+1,f
   697  06FF  3EFF               	addlw	-1
   698  0700  1D03               	skipz
   699  0701  2EFC               	goto	u275
   700  0702  3001               	movlw	1
   701  0703  00F4               	movwf	??___awmod
   702  0704  0874               	movf	??___awmod,w
   703  0705  07F5               	addwf	___awmod@counter,f
   704  0706  2EF9               	goto	l716
   705  0707                     l718:	
   706  0707  0871               	movf	___awmod@divisor+1,w
   707  0708  0273               	subwf	___awmod@dividend+1,w
   708  0709  1D03               	skipz
   709  070A  2F0D               	goto	u295
   710  070B  0870               	movf	___awmod@divisor,w
   711  070C  0272               	subwf	___awmod@dividend,w
   712  070D                     u295:	
   713  070D  1C03               	skipc
   714  070E  2F15               	goto	l722
   715  070F  0870               	movf	___awmod@divisor,w
   716  0710  02F2               	subwf	___awmod@dividend,f
   717  0711  0871               	movf	___awmod@divisor+1,w
   718  0712  1C03               	skipc
   719  0713  03F3               	decf	___awmod@dividend+1,f
   720  0714  02F3               	subwf	___awmod@dividend+1,f
   721  0715                     l722:	
   722  0715  3001               	movlw	1
   723  0716                     u305:	
   724  0716  1003               	clrc
   725  0717  0CF1               	rrf	___awmod@divisor+1,f
   726  0718  0CF0               	rrf	___awmod@divisor,f
   727  0719  3EFF               	addlw	-1
   728  071A  1D03               	skipz
   729  071B  2F16               	goto	u305
   730  071C  3001               	movlw	1
   731  071D  02F5               	subwf	___awmod@counter,f
   732  071E  1D03               	btfss	3,2
   733  071F  2F07               	goto	l718
   734  0720                     l726:	
   735  0720  0876               	movf	___awmod@sign,w
   736  0721  1903               	btfsc	3,2
   737  0722  2F28               	goto	l730
   738  0723  09F2               	comf	___awmod@dividend,f
   739  0724  09F3               	comf	___awmod@dividend+1,f
   740  0725  0AF2               	incf	___awmod@dividend,f
   741  0726  1903               	skipnz
   742  0727  0AF3               	incf	___awmod@dividend+1,f
   743  0728                     l730:	
   744  0728  0873               	movf	___awmod@dividend+1,w
   745  0729  00F1               	movwf	?___awmod+1
   746  072A  0872               	movf	___awmod@dividend,w
   747  072B  00F0               	movwf	?___awmod
   748  072C  0008               	return
   749  072D                     __end_of___awmod:	
   750  007E                     btemp	set	126	;btemp
   751  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80      0       5
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->___awmod

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     424
                                              7 COMMON     1     1      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4     424
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0       5       3        6.3%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      13      10        0.0%
ABS                  0      0      13       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon May 01 21:28:46 2017

                      pc 0002              __CFG_CP$OFF 0000                       l50 077F  
                     l49 075C                       fsr 0004                      S860 0001  
                    l704 06EC                      l730 0728                      l722 0715  
                    l802 07E3                      l716 06F9                      l708 06F3  
                    l820 07D8                      l804 07B3                      l718 0707  
                    l726 0720                      l822 07DC                      l814 07C7  
                    l750 0745                      l772 0765                      l782 077A  
                    l794 07AA                      l786 0786                      u305 0716  
                    u425 07B6             __CFG_CPD$OFF 0000                      u275 06FC  
                    u295 070D                      u477 07DE             ___awmod@sign 0076  
           __CFG_LVP$OFF 0000                     _main 072D                     btemp 007E  
          __CFG_BOREN$ON 0000                     start 0000                    ?_main 0070  
          __CFG_WDTE$OFF 0000          __end_of___awmod 072D                    _CMCON 001F  
                  _PORTA 0005                    _PORTB 0006                    _TRISB 0086  
                  pclath 000A                    status 0003                    wtemp0 007E  
         __CFG_MCLRE$OFF 0000          __initialization 07EF             __end_of_main 07EF  
                 ??_main 0077                   _TRISA2 042A                   _TRISA3 042B  
         __CFG_PWRTE$OFF 0000                ??___awmod 0074     _hookPinState_current 0078  
        ___awmod@divisor 0070          ___awmod@counter 0075             __pdataCOMMON 007C  
__end_of__initialization 07FE           __pcstackCOMMON 0070             __pidataBANK0 06DE  
          _hook_debounce 0023           _OPTION_REGbits 0081          _number_debounce 007C  
             __pbssBANK0 0020               __pmaintext 072D                  ___awmod 06E2  
                __ptext1 06E2         ___awmod@dividend 0072     end_of_initialization 07FE  
              _PORTAbits 0005                _PORTBbits 0006            __pidataCOMMON 06E0  
    start_initialization 07EF          _delay_setNumber 0079              __pdataBANK0 0023  
            __pbssCOMMON 0078                ___latbits 0000        _hookPinState_last 0020  
              _dialState 007B                 ?___awmod 0070                __pswtext1 0001  
      _numberEdgeCounter 0021   _numberPinState_current 007A         __size_of___awmod 004B  
          __size_of_main 00C2      _dialActive_debounce 007D      _numberPinState_last 0022  
     __CFG_FOSC$INTOSCIO 0000  
